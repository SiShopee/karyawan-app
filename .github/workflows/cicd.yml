# Nama workflow untuk proyek Python/Flask
name: Python Flask CI/CD Pipeline

# Kapan workflow ini akan berjalan
on:
  push:
    branches: [ "main", "develop" ] # Berjalan saat ada push ke branch main atau develop
  pull_request:
    branches: [ "main" ] # Berjalan saat ada pull request ke branch main

jobs:
  # Job 1: Build & Test (sudah mencakup instalasi dependensi)
  build_and_test:
    name: Build & Test
    runs-on: ubuntu-latest

    # Menjalankan layanan database MySQL di dalam container Docker untuk pengujian
    services:
      mysql:
        image: mysql:5.7 # Menggunakan image Docker MySQL versi 5.7
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }} # Gunakan secret untuk password
          MYSQL_DATABASE: karyawan_db_test # Nama database untuk testing
        ports:
          - 3306:3306 # Map port agar bisa diakses di localhost (127.0.0.1) oleh runner
        options: >- # Opsi untuk health check, menunggu sampai MySQL siap
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # Langkah 1: Checkout kode dari repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Langkah 2: Setup lingkungan Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Ganti dengan versi Python Anda
          cache: 'pip' # Mengaktifkan cache untuk dependensi pip

      # Langkah 3: Instal dependensi dari requirements.txt
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # Langkah 4: Menjalankan unit/integration test dengan Pytest
      - name: Run Tests
        env:
          # Variabel lingkungan ini akan digunakan oleh aplikasi Flask Anda
          # untuk terhubung ke database MySQL yang berjalan di service container.
          FLASK_ENV: testing
          DATABASE_URL: "mysql+pymysql://root:${{ secrets.DB_PASSWORD }}@127.0.0.1:3306/karyawan_db_test"
        run: |
          pip install pytest # Pastikan pytest ada di requirements.txt atau instal di sini
          pytest --junitxml=test-results.xml # Menjalankan tes dan membuat laporan

      # Langkah 5: Upload hasil tes sebagai artifact
      # Ini menggantikan job 'test' yang terpisah sebelumnya
      - name: Upload test results
        if: always() # Selalu jalankan langkah ini, bahkan jika tes gagal
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.xml

  # Job 2: Security Scan
  security-scan:
    name: Security Scan
    needs: build_and_test # Jalankan setelah build & test berhasil
    runs-on: ubuntu-latest
    steps:
      # Setup lingkungan dasar lagi untuk job ini
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # SAST: Bandit untuk Python (pengganti ESLint untuk JavaScript)
      - name: Install and Run Bandit
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json

      # Upload laporan Bandit sebagai artifact
      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

  # Job 3: Deploy ke Staging (jika security scan berhasil)
  deploy-staging:
    name: Deploy to Staging
    needs: security-scan
    runs-on: ubuntu-latest
    environment: staging # Menggunakan environment 'staging' di GitHub
    if: github.ref == 'refs/heads/main' # Hanya deploy jika ada push ke branch main

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Contoh deploy menggunakan SSH dan rsync
      # Ini adalah metode umum untuk deploy aplikasi Python/Flask
      - name: Deploy to Staging Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }} # IP atau domain server staging Anda
          username: ${{ secrets.STAGING_USERNAME }} # Username untuk SSH
          key: ${{ secrets.STAGING_SSH_KEY }} # Kunci privat SSH
          port: 22 # Port SSH
          script: |
            # Pindah ke direktori aplikasi
            cd /var/www/karyawanapp 
            
            # Tarik perubahan terbaru dari Git
            git pull origin main
            
            # (Opsional) Aktivasi virtual environment jika ada
            # source venv/bin/activate
            
            # Install/update dependensi
            pip install -r requirements.txt
            
            # (Opsional) Jalankan migrasi database jika menggunakan Flask-Migrate
            # flask db upgrade
            
            # Restart service aplikasi (contoh menggunakan systemd untuk Gunicorn)
            sudo systemctl restart karyawanapp
            echo "Deployment to staging finished!"
